{"version":3,"sources":["components/Restaurant.js","App.js","reportWebVitals.js","index.js"],"names":["Restaurant","key","name","thumb","cuisines","cost","rating","votes","Container","fluid","className","Row","Card","Image","src","rounded","Title","style","display","count","onChange","newRating","console","log","size","activeColor","Text","App","useState","restaurant","setRest","useEffect","getRestaurants","a","fetch","method","headers","Accept","response","json","data","nearby_restaurants","class","map","rest","average_cost_for_two","user_rating","aggregate_rating","R","res_id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTA0CeA,EApCI,SAAC,GAAwD,EAAvDC,IAAwD,IAAnDC,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,KAAOC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MAO/D,OACO,cAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,gBAA3B,SAEI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAMF,UAAU,WAAhB,SACI,sBAAKA,UAAU,cAAf,UACI,cAACG,EAAA,EAAD,CAAOC,IAAKX,EAAOO,UAAU,YAAYK,SAAO,IAChD,cAACH,EAAA,EAAKI,MAAN,CAAYN,UAAU,WAAtB,SAAkCR,IAClC,sBAAKe,MAAO,CAAEC,QAAS,gBAAvB,UACI,cAAC,IAAD,CACIC,MAAOb,EACPc,SAhBN,SAACC,GACnBC,QAAQC,IAAIF,IAgBYG,KAAM,GACNC,YAAY,YAEhB,cAACb,EAAA,EAAKc,KAAN,CAAWhB,UAAU,aAArB,SAAmCJ,IACnC,eAACM,EAAA,EAAKc,KAAN,CAAWhB,UAAU,YAArB,cAAoCH,EAApC,2BAEJ,cAACK,EAAA,EAAKc,KAAN,CAAWhB,UAAU,eAArB,SAAsCN,IACtC,eAACQ,EAAA,EAAKc,KAAN,CAAWhB,UAAU,WAArB,mBAAkCL,EAAlC,2B,MC4BTsB,MAtDf,WAAgB,IAAD,EAEgBC,mBAAS,IAFzB,mBAEPC,EAFO,KAEKC,EAFL,KAKdC,qBAAU,WACTC,OAGD,IAAMA,EAAc,uCAAG,8BAAAC,EAAA,sEACEC,MAAM,yEAE5B,CACCC,OAAQ,MACRC,QAAS,CACRC,OAAQ,mBACR,WAAY,sCAPM,cACfC,EADe,gBAWFA,EAASC,OAXP,OAWfC,EAXe,OAYrBV,EAAQU,EAAKC,oBAZQ,2CAAH,qDAepB,OACI,sBAAK/B,UAAU,SAAf,UACG,qBAAKA,UAAU,gBAAf,SACE,eAACC,EAAA,EAAD,WACE,wBAAQ+B,MAAM,gBAAd,oBACA,wBAAQA,MAAM,gBAAd,0BACA,wBAAQA,MAAM,gBAAd,+BACA,wBAAQA,MAAM,gBAAd,2BACA,wBAAQA,MAAM,gBAAd,oBACA,wBAAQA,MAAM,gBAAd,uBAGP,uDACG,8BACCb,EAAWc,KAAI,SAAAC,GAAI,OACxB,cAAC,EAAD,CAEC1C,KAAQ0C,EAAKf,WAAW3B,KACxBC,MAASyC,EAAKf,WAAW1B,MACzBC,SAAYwC,EAAKf,WAAWzB,SAC5BC,KAAQuC,EAAKf,WAAWgB,qBACxBvC,OAAUsC,EAAKf,WAAWiB,YAAYC,iBACtCxC,MAASqC,EAAKf,WAAWiB,YAAYvC,OAN9BqC,EAAKf,WAAWmB,EAAEC,iBClCfC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.13dd90db.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, Col, Row , Container, Image} from 'react-bootstrap'\r\nimport ReactStars from \"react-rating-stars-component\";\r\n\r\nimport './style.css'\r\n\r\nconst Restaurant = ({key, name, thumb, cuisines, cost , rating, votes }) => {\r\n\r\n    const ratingChanged = (newRating) => {\r\n        console.log(newRating);\r\n      };\r\n\r\n\r\n\treturn (\r\n        <Container fluid className=\"res-container\">\r\n            \r\n            <Row>\r\n                <Card className='res-card' >\r\n                    <div className='inline-show'>\r\n                        <Image src={thumb} className=\"res-image\" rounded />\r\n                        <Card.Title className=\"res-name\">{name}</Card.Title>\r\n                        <div style={{ display: 'inline-block' }}>\r\n                            <ReactStars\r\n                                count={rating}\r\n                                onChange={ratingChanged}\r\n                                size={18}\r\n                                activeColor=\"#800000\"\r\n                            />\r\n                            <Card.Text className=\"res-rating\">{rating}</Card.Text>\r\n                            <Card.Text className=\"res-votes\" >({votes}) delivery reviews</Card.Text>\r\n                        </div>\r\n                        <Card.Text className=\"res-cuisines\" >{cuisines}</Card.Text>\r\n                        <Card.Text className=\"res-cost\">â‚¹{cost} per person</Card.Text>\r\n                    </div>\r\n                </Card>\r\n            </Row>\r\n            \r\n        </Container>\r\n\r\n\t)\r\n}\r\n\r\nexport default Restaurant\r\n","import React,{ useState, useEffect } from 'react'\nimport { Row } from 'react-bootstrap';\nimport Restaurant from './components/Restaurant';\nimport './App.css'\n\n\nfunction App() {\n\n\tconst [restaurant, setRest] = useState([]);\n  \n\t\n\tuseEffect(() => {\n\t\tgetRestaurants();\n\t});\n\t\n\tconst getRestaurants = async () => {\n\t\t\tconst response = await fetch(\n\t\t\t\t`https://developers.zomato.com/api/v2.1/geocode?lat=12.9039&lon=77.6013`, \n\t\t\t\t{\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAccept: 'application/json',\n\t\t\t\t\t\t'user-key': 'f91be19c725fd96a6fb68414adc6ec34'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t\tconst data = await response.json();\n\t\t\tsetRest(data.nearby_restaurants);\n\t\t}\n    \n\treturn (\n\t    <div className=\"Zomato\">\n        <div className=\"buttons-align\">\n          <Row>\n            <button class=\"btn btn-small\">Filter</button>\n            <button class=\"btn btn-small\">Rating: 4.0+</button> \n            <button class=\"btn btn-small\">Safe and Hygienic</button> \n            <button class=\"btn btn-small\">Delivery Time</button>\n            <button class=\"btn btn-small\">Rating</button> \n            <button class=\"btn btn-small\">Cost</button>            \n          </Row>\n        </div>\n\t  \t\t<h2>Restaurants near you:</h2>\n        <div>\n        {restaurant.map(rest => (\n\t\t\t\t<Restaurant\n\t\t\t\t\tkey = {rest.restaurant.R.res_id}\n\t\t\t\t\tname = {rest.restaurant.name}\n\t\t\t\t\tthumb = {rest.restaurant.thumb}\n\t\t\t\t\tcuisines = {rest.restaurant.cuisines}\n\t\t\t\t\tcost = {rest.restaurant.average_cost_for_two}\n\t\t\t\t\trating = {rest.restaurant.user_rating.aggregate_rating}\n\t\t\t\t\tvotes = {rest.restaurant.user_rating.votes}\n\t\t\t\t  />\t  \n\t\t\t  ))}\n        </div>\n\t    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}